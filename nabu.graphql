type AccessCondition {
  collections: [Collection]
  items: [Item]
  name: String
}

type Agent {
  roleName: String
  user: Person
  userName: String
}

type Boundary {
  eastLimit: Float!
  northLimit: Float!
  southLimit: Float!
  westLimit: Float!
}

type Collection {
  accessClass: String
  accessNarrative: String
  boundaries: Boundary
  citation: String
  collector: Person
  comments: String
  complete: Boolean
  contentLanguages: [Language]
  countries: [Country]
  description: String
  doi: String
  doiXml: String
  fieldOfResearch: FieldOfResearch
  grants: [Grant]
  id: ID!
  identifier: String!
  media: String
  metadataSource: String
  operator: Person
  orthographicNotes: String
  permalink: String!
  region: String
  subjectLanguages: [Language]
  tapeLocation: Boolean
  title: String!
  university: University
}

type Country {
  boundaries: [Boundary]
  code: String!
  id: ID!
  languages: [Language]
  name: String!
}

type DataCategory {
  id: ID!
  items: [Item]
  name: String!
}

type DataType {
  id: ID!
  items: [Item]
  name: String!
}

type DiscourseType {
  id: ID!
  itesm: [Item]
  name: String!
}

type Essence {
  bitrate: Int
  channels: Int
  citation: String
  collection: Collection
  doi: String
  doiXml: String
  duration: Float
  filename: String
  fps: Int
  id: ID!
  item: Item
  mimetype: String
  permalink: String!
  samplerate: Int
  size: Int
}

type FieldOfResearch {
  collections: [Collection]
  id: ID!
  identifier: String!
  name: String!
}

type FundingBody {
  fundedCollections: [Collection]
  grants: [Grant]
  id: ID!
  keyPrefix: String
  name: String!
}

type Grant {
  colleciton: Collection
  fundingBody: FundingBody
  id: ID!
  identifier: String
}

type Item {
  accessClass: String
  accessCondition: AccessCondition
  accessConditionName: String
  accessNarrative: String
  bornDigital: Boolean
  boundaries: Boundary
  citation: String
  collection: Collection!
  collector: Person!
  contentLanguages: [Language]
  countries: [Country]
  dataCategories: [DataCategory]
  dataTypes: [DataType]
  description: String
  dialect: String
  digitisedOn: String
  discourseType: DiscourseType
  doi: String
  doiXml: String
  essences: [Essence]
  essencesCount: Int
  fullIdentifier: String!
  id: ID!
  identifier: String!
  ingestNotes: String
  itemAgents: [Agent]
  language: String
  operator: Person
  originalMedia: String
  originatedOn: String
  originatedOnNarrative: String
  permalink: String!
  private: Boolean
  public: Boolean
  receivedOn: String
  region: String
  subjectLanguages: [Language]
  title: String
  tracking: String
  university: University
}

type ItemResult {
  nextPage: Int
  results: [Item]!
  total: Int!
}

type Language {
  archiveLink: String
  code: String!
  collection: [Collection]
  countries: [Country]
  id: ID!
  itemsForContent: [Item]
  itemsForLanguage: [Item]
  name: String!
  retired: Boolean
}

type Person {
  collectedItems: Item
  country: String
  firstName: String
  id: ID!
  lastName: String
  name: String
}

type Query {
  items(access_class: String, access_condition_name: String, access_narrative: String, born_digital: Boolean, collection_identifier: String, collector_name: String, description: String, dialect: String, digitised_on: String, discourse_type_name: String, doi: String, essencesCount: Int, full_identifier: String, id: ID, identifier: String, ingestNotes: String, language: String, limit: Int = 10, operator_name: String, original_media: String, originated_on: String, originated_on_narrative: String, page: Int = 1, private: Boolean, received_on: String, region: String, title: String, tracking: String, university_name: String): ItemResult
}

type University {
  collections: [Collection]
  id: ID!
  items: [Item]
  name: String!
  partyIdentifier: String
}
