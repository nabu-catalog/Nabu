#!/usr/bin/env bash

export AWS_OUTPUT="json"

echo "Creating SSH key..."
KEYNAME="db-upload-key-delete-me-${RANDOM}"
aws ec2 create-key-pair \
  --key-name "${KEYNAME}" \
  --key-type ed25519 \
  | jq -r .KeyMaterial > "${KEYNAME}.pem"

chmod 600 "${KEYNAME}.pem"
ssh-add "${KEYNAME}.pem"

echo "Finding AMI..."
AMI=$(aws ec2 describe-images \
  --owners 099720109477 \
  --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-kinetic-*-arm64-server*" \
  --query 'sort_by(Images, &CreationDate)[-1].{Name: Name, ImageId: ImageId, CreationDate: CreationDate, Owner:OwnerId}' \
  | jq -r .ImageId)

echo "Finding VPC..."
VPC_ID=$(aws ec2 describe-vpcs \
  --query 'Vpcs[?Tags[?Value == `StageCdkStack`]]' \
  | jq -r '.[0].VpcId')

echo "Finding Subnet..."
SUBNET_ID=$(aws ec2 describe-subnets \
  --filters "Name=vpc-id,Values=${VPC_ID}" \
  | jq -r '.Subnets[0] | .SubnetId')


echo "Creating EC2 Security Group..."
GROUP_NAME="db-upload-group-delete-me-${RANDOM}"

SG_ID=$(aws ec2 create-security-group \
  --vpc-id "${VPC_ID}" \
  --group-name ${GROUP_NAME} \
  --description 'Temp SSH for RDS import - DELETE ME' \
  | jq -r .GroupId)

MYIP=`curl -s ipinfo.io/ip`
aws ec2 authorize-security-group-ingress \
  --group-id "${SG_ID}" \
  --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=$MYIP/32}]"

echo "Finding RDS Instance..."
RDS_SG=$(aws rds describe-db-instances \
  --query 'DBInstances[?TagList[?Value == `StageCdkStack`]]' \
  | jq -r '.[] | .VpcSecurityGroups[0].VpcSecurityGroupId')

echo "Updating RDS Security Group..."
RULE_ID=$(aws ec2 authorize-security-group-ingress \
  --group-id "${RDS_SG}" \
  --protocol tcp \
  --port 3306 \
  --source-group "${SG_ID}" \
  | jq -r .SecurityGroupRules[0].SecurityGroupRuleId)


echo "Creating EC2 Instance..."
INSTANCE_ID=$(aws ec2 run-instances \
  --image-id "${AMI}" \
  --count 1 \
  --instance-type t4g.nano \
  --key-name "${KEYNAME}" \
  --subnet-id ${SUBNET_ID} \
  --security-group-ids "${SG_ID}" \
  | jq -r .Instances[0].InstanceId)

echo "Waiting for EC2 Instance..."
aws ec2 wait instance-running \
  --instance-ids "${INSTANCE_ID}"

echo "Getting EC2 IP..."
EC2_IP=$(aws ec2 describe-instances \
  --instance-ids $INSTANCE_ID \
  | jq -r  '.Reservations[0].Instances[0].PublicIpAddress')

echo "Installing dependencies..."
ssh \
  -o StrictHostKeychecking=no \
  ubuntu@"${EC2_IP}" \
  sudo apt install --yes mysql-client bzip2

echo "Get DB secret..."
DB_SECRET_ID=$(aws secretsmanager list-secrets \
  | jq -r '.SecretList | .[] | select(.Name | test("StageCdkStackRdsInstance")) | .ARN')

DB_SECRET=$(aws secretsmanager get-secret-value \
  --secret-id "${DB_SECRET}" \
  | jq -r .SecretString)

DB_HOSTNAME=$(echo "${DB_SECRET}" | jq -r .host)
DB_USERNAME=$(echo "${DB_SECRET}" | jq -r .username)
DB_PASSWORD=$(echo "${DB_SECRET}" | jq -r .password)
DB_NAME=$(echo "${DB_SECRET}" | jq -r .dbname)

echo "Load DB..."
cat ../nabu-small.sql.bz2 | ssh \
  -o StrictHostKeychecking=no \
  ubuntu@"${EC2_IP}" \
  "bunzip -dc |" mysql -h "${DB_HOSTNAME}" -u "${DB_USERNAME}" -p"${DB_PASSWORD}" "${DB_NAME}"

echo "Terminating everything"
aws ec2 terminate-instances \
  --instance-ids "${INSTANCE_ID}"

aws ec2 revoke-security-group-ingress \
  --group-id "${RDS_SG}" \
  --security-group-rule-ids "${RULE_ID}"

ssh-add -d "${KEYNAME}.pem"

rm "${KEYNAME}.pem"

aws ec2 delete-key-pair \
  --key-name "${KEYNAME}"

aws ec2 wait instance-terminated \
  --instance-ids "${INSTANCE_ID}"

aws ec2 delete-security-group \
  --group-id "${SG_ID}"

