#!/usr/bin/env bash

export AWS_OUTPUT="json"

echo "Creating SSH key..."
KEYNAME="db-upload-key-delete-me-${RANDOM}"
aws ec2 create-key-pair \
  --key-name "${KEYNAME}" \
  --key-type ed25519 \
  | jq -r .KeyMaterial > "${KEYNAME}.pem"

chmod 600 "${KEYNAME}.pem"
ssh-add "${KEYNAME}.pem"

echo "Finding AMI..."
AMI=$(aws ec2 describe-images \
  --owners 099720109477 \
  --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-kinetic-*-arm64-server*" \
  --query 'sort_by(Images, &CreationDate)[-1].{Name: Name, ImageId: ImageId, CreationDate: CreationDate, Owner:OwnerId}' \
  | jq -r .ImageId)

echo "Finding VPC..."
VPC_ID=$(aws ec2 describe-vpcs \
  | jq -r '.Vpcs[0].VpcId')

echo "Finding Subnet..."
SUBNET_ID=$(aws ec2 describe-subnets \
  --filters "Name=vpc-id,Values=${VPC_ID}" \
  | jq -r '.Subnets[0] | .SubnetId')


echo "Creating EC2 Security Group..."
GROUP_NAME="db-upload-group-delete-me-${RANDOM}"

SG_ID=$(aws ec2 create-security-group \
  --vpc-id "${VPC_ID}" \
  --group-name ${GROUP_NAME} \
  --description 'Temp SSH for RDS import - DELETE ME' \
  | jq -r .GroupId)

MYIP=`curl -s ipinfo.io/ip`
aws ec2 authorize-security-group-ingress \
  --group-id "${SG_ID}" \
  --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=$MYIP/32}]"

echo "Finding RDS Instance..."
RDS_SG=$(aws rds describe-db-instances \
  | jq -r '.DBInstances[0].VpcSecurityGroups[0].VpcSecurityGroupId')

echo "Updating RDS Security Group..."
RULE_ID=$(aws ec2 authorize-security-group-ingress \
  --group-id "${RDS_SG}" \
  --protocol tcp \
  --port 3306 \
  --source-group "${SG_ID}" \
  | jq -r .SecurityGroupRules[0].SecurityGroupRuleId)

echo Creating role and profile...
# Create a role that will allow systems manager ssh
aws iam create-role \
  --role-name "db-upload-delete-me-role" \
  --assume-role-policy-document '{
      "Version": "2012-10-17",
      "Statement": [
          {
          "Effect": "Allow",
          "Principal": {
              "Service": "ec2.amazonaws.com"
          },
          "Action": "sts:AssumeRole"
          }
      ]
      }' \
  > /dev/null

# Add SSM access to the role
aws iam attach-role-policy \
  --role-name "db-upload-delete-me-role" \
  --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore \
  > /dev/null

# Create an instance profile
aws iam create-instance-profile \
  --instance-profile-name "db-upload-delete-me-profile" \
  > /dev/null

# Attach role to profile
aws iam add-role-to-instance-profile \
   --instance-profile-name "db-upload-delete-me-profile" \
   --role-name "db-upload-delete-me-role" \
   > /dev/null

echo "Creating EC2 Instance..."
INSTANCE_ID=$(aws ec2 run-instances \
  --image-id "${AMI}" \
  --count 1 \
  --instance-type t4g.nano \
  --key-name "${KEYNAME}" \
  --subnet-id ${SUBNET_ID} \
  --security-group-ids "${SG_ID}" \
  --iam-instance-profile Name="db-upload-delete-me-profile" \
  | jq -r .Instances[0].InstanceId)

echo "Waiting for EC2 Instance..."
aws ec2 wait instance-running \
  --instance-ids "${INSTANCE_ID}"

echo "Installing dependencies..."
ssh ubuntu@$INSTANCE_ID \
  sudo apt install --yes mysql-client bzip2

echo "Get DB secret..."
DB_SECRET_ID=$(aws secretsmanager list-secrets \
  | jq -r '.SecretList | .[] | select(.Name | test("RdsInstance")) | .ARN')

DB_SECRET=$(aws secretsmanager get-secret-value \
  --secret-id "${DB_SECRET_ID}" \
  | jq -r .SecretString)

DB_HOSTNAME=$(echo "${DB_SECRET}" | jq -r .host)
DB_USERNAME=$(echo "${DB_SECRET}" | jq -r .username)
DB_PASSWORD=$(echo "${DB_SECRET}" | jq -r .password)
DB_NAME=$(echo "${DB_SECRET}" | jq -r .dbname)

echo "Load DB..."
scp ../nabu-small-new.sql.bz2 ubuntu@${INSTANCE_ID}:
ssh ubuntu@${INSTANCE_ID} "bunzip2 -d nabu-small-new.sql.bz2 |" mysql -h "${DB_HOSTNAME}" -u "${DB_USERNAME}" -p"${DB_PASSWORD}" "${DB_NAME}"

echo "Terminating everything"
aws ec2 terminate-instances \
  --instance-ids "${INSTANCE_ID}"

aws ec2 revoke-security-group-ingress \
  --group-id "${RDS_SG}" \
  --security-group-rule-ids "${RULE_ID}"

ssh-add -d "${KEYNAME}.pem"

rm "${KEYNAME}.pem"

aws ec2 delete-key-pair \
  --key-name "${KEYNAME}"

aws ec2 wait instance-terminated \
  --instance-ids "${INSTANCE_ID}"

aws ec2 delete-security-group \
  --group-id "${SG_ID}"
