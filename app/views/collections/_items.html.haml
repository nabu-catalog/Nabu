
%fieldset
  %legend Items in Collection (#{@num_items})

  .right
    %p
      - if can? :create, @items.build # TODO this actually adds an item to the array is there a better way
        = link_to 'Add new item', new_collection_item_path(@collection), :class => 'button'

  .left
    = paginate @items, :param_name => :items_page

  .clear

  %table.table
    %thead
      %tr
        = sortable :identifier, 'Item'
        = sortable :title, nil
        - if can? :update, @collection
          %th Digitised
          %th Files
        %th Actions
    %tbody
      - if @num_items == 0
        %tr
          %td no items available
          %td
          - if can? :update, @collection
            %td
            %td
          %td
      - else
        - @items.each do |item|
          - if can? :read, item
            %tr
              %td.nowrap{style: 'padding-right: 10px;'}
                %span= item.identifier
                -#set up the access condition icon/label - label is open/closed/other
                -#tooltip is access condition name + optional access narrative
                -access_condition = item.access_condition ? item.access_condition.name : 'Access conditions not set'
                -access_condition = "#{access_condition}\n\n#{item.access_narrative}".strip
                -access_class = item.access_class

                %span.access{title: access_condition, class: access_class}
              %td= item.title
              - if can? :update, @collection
                %td.nowrap{style: 'min-width: 75px;'}
                  - if item.digitised_on
                    = item.digitised_on.strftime('%d/%m/%Y')
                %td= item.essences.count
              %td{style: 'min-width: 60px;'}
                = link_to 'View', [item.collection, item], {class: 'minwhitespace'}
                = link_to 'Edit', edit_collection_item_path(item.collection, item), {class: 'minwhitespace'} if can? :update, item

  = paginate @items, :param_name => :items_page

  %p
    - ['10', '50', '100', "all #{@num_items}"].each do |n|
      = link_to "Show #{n}", params.permit!.merge(items_per_page: n.sub('all ', ''), page: n.start_with?('all') ? 1 : params[:page]), class: 'button'
